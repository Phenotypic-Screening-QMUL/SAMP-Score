# Now for Clusters
Sen_Hits <- common_hits$Final_Hits
library(dplyr)
# Create a dataframe with the counts of matched entries
result <- data.frame(
Vector = c("SENCAN", "SENCAN_Neg", "Senescopedia_Down", "Senescopedia_Sig", "Cell_Cycle", "Senescence", "Sen_Hits"),
Count_Only = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Count_Only) / length(vector) * 100), 1)),
Hits_High = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Hits_High) / length(vector) * 100), 1)),
Hits_Med = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Hits_Med) / length(vector) * 100), 1)),
Hits_Low = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Hits_Low) / length(vector) * 100), 1))
)
# Print the result dataframe
Test <- result
Test
library(ggplot2)
# Reshape the Test dataframe for ggplot2
library(reshape2)
Test <- Test %>% filter (Vector %in% c(Sen_Hits))
Test_melted <- melt(Test, id.vars = "Vector")
Test_melted <- Test_melted %>% filter(grepl("Hits", variable))
# Define a custom color palette
my_colors <- c("#E41A1C", "#377EB8", "#4DAF4A")
# Create a prettier square faceted bar chart with a fixed y-axis of 100 and custom colors
ggplot(Test_melted, aes(x = Vector, y = value, fill = Vector)) +
geom_bar(stat = "identity") +
facet_wrap(~ variable, ncol = 2, scales = "free") +
labs(title = "Percentage Comparisons",
x = "Vector",
y = "Percentage") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right",
text = element_text(face = "bold")) +
scale_fill_manual(values = my_colors) +
ylim(0, 100) +
guides(fill = guide_legend(title = "Vector")) +
scale_y_continuous(labels = scales::percent_format(scale = 1), limits = c(0, 100))
library("gplots")
library("RColorBrewer")
library("matrixStats")
library("plyr")
library("dplyr")
library("data.table")
library("stringr")
library("ggplot2")
library("Rtsne")
# List of file paths
file_paths <- c(
"Hits_Nuc_Count_Only.csv",
"Hits.csv",
"Hits_1.96.csv",
"Hits_1.csv",
"SENCAN.csv",
"SENCAN_Down.csv",
"Senescopeida.csv",
"Senescopeida_Sig.csv",
"Cell Cycle.csv",
"Senescence.csv"
)
# Create a function to load a file and extract the second column as a vector
load_and_extract_second_column <- function(file_path) {
# Load the file into a data frame
data <- read.csv(file_path)
# Extract the second column as a vector
vector <- data[[2]]
return(vector)
}
# Use lapply to load the files and create a list of vectors
vector_list <- lapply(file_paths, load_and_extract_second_column)
# Override the original data frames with the vectors
Count_Only <- vector_list[[1]]
Hits_High <- vector_list[[2]]
Hits_Med <- vector_list[[3]]
Hits_Low <- vector_list[[4]]
SENCAN <- vector_list[[5]]
SENCAN_Neg <- vector_list[[6]]
Senescopedia_Down <- vector_list[[7]]
Senescopedia_Sig <- vector_list[[8]]
Cell_Cycle <- vector_list[[9]]
Senescence <- vector_list[[10]]
# Now for Clusters
Sen_Hits <- common_hits$Final_Hits
library(dplyr)
# Create a dataframe with the counts of matched entries
result <- data.frame(
Vector = c("SENCAN", "SENCAN_Neg", "Senescopedia_Down", "Senescopedia_Sig", "Cell_Cycle", "Senescence", "Sen_Hits"),
Count_Only = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Count_Only) / length(vector) * 100), 1)),
Hits_High = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Hits_High) / length(vector) * 100), 1)),
Hits_Med = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Hits_Med) / length(vector) * 100), 1)),
Hits_Low = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Hits_Low) / length(vector) * 100), 1))
)
# Print the result dataframe
Test <- result
Test
library(ggplot2)
# Reshape the Test dataframe for ggplot2
library(reshape2)
Test <- Test %>% filter (Vector %in% c(Sen_Hits))
Test_melted <- melt(Test, id.vars = "Vector")
Test_melted <- Test_melted %>% filter(grepl("Hits", variable))
# Define a custom color palette
my_colors <- c("#E41A1C", "#377EB8", "#4DAF4A")
# Create a prettier square faceted bar chart with a fixed y-axis of 100 and custom colors
ggplot(Test_melted, aes(x = Vector, y = value, fill = Vector)) +
geom_bar(stat = "identity") +
facet_wrap(~ variable, ncol = 2, scales = "free") +
labs(title = "Percentage Comparisons",
x = "Vector",
y = "Percentage") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right",
text = element_text(face = "bold")) +
scale_fill_manual(values = my_colors) +
ylim(0, 100) +
guides(fill = guide_legend(title = "Vector")) +
scale_y_continuous(labels = scales::percent_format(scale = 1), limits = c(0, 100))
Test_melted
# Create a prettier square faceted bar chart with a fixed y-axis of 100 and custom colors
ggplot(Test, aes(x = Vector, y = value, fill = Vector)) +
geom_bar(stat = "identity") +
facet_wrap(~ variable, ncol = 2, scales = "free") +
labs(title = "Percentage Comparisons",
x = "Vector",
y = "Percentage") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right",
text = element_text(face = "bold")) +
scale_fill_manual(values = my_colors) +
ylim(0, 100) +
guides(fill = guide_legend(title = "Vector")) +
scale_y_continuous(labels = scales::percent_format(scale = 1), limits = c(0, 100))
library("gplots")
library("RColorBrewer")
library("matrixStats")
library("plyr")
library("dplyr")
library("data.table")
library("stringr")
library("ggplot2")
library("Rtsne")
# List of file paths
file_paths <- c(
"Hits_Nuc_Count_Only.csv",
"Hits.csv",
"Hits_1.96.csv",
"Hits_1.csv",
"SENCAN.csv",
"SENCAN_Down.csv",
"Senescopeida.csv",
"Senescopeida_Sig.csv",
"Cell Cycle.csv",
"Senescence.csv"
)
# Create a function to load a file and extract the second column as a vector
load_and_extract_second_column <- function(file_path) {
# Load the file into a data frame
data <- read.csv(file_path)
# Extract the second column as a vector
vector <- data[[2]]
return(vector)
}
# Use lapply to load the files and create a list of vectors
vector_list <- lapply(file_paths, load_and_extract_second_column)
# Override the original data frames with the vectors
Count_Only <- vector_list[[1]]
Hits_High <- vector_list[[2]]
Hits_Med <- vector_list[[3]]
Hits_Low <- vector_list[[4]]
SENCAN <- vector_list[[5]]
SENCAN_Neg <- vector_list[[6]]
Senescopedia_Down <- vector_list[[7]]
Senescopedia_Sig <- vector_list[[8]]
Cell_Cycle <- vector_list[[9]]
Senescence <- vector_list[[10]]
# Now for Clusters
Sen_Hits <- common_hits$Final_Hits
library(dplyr)
# Create a dataframe with the counts of matched entries
result <- data.frame(
Vector = c("SENCAN", "SENCAN_Neg", "Senescopedia_Down", "Senescopedia_Sig", "Cell_Cycle", "Senescence", "Sen_Hits"),
Count_Only = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Count_Only) / length(vector) * 100), 1)),
Hits_High = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Hits_High) / length(vector) * 100), 1)),
Hits_Med = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Hits_Med) / length(vector) * 100), 1)),
Hits_Low = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Hits_Low) / length(vector) * 100), 1))
)
# Print the result dataframe
Test <- result
print(Test)
library("gplots")
library("RColorBrewer")
library("matrixStats")
library("plyr")
library("dplyr")
library("data.table")
library("stringr")
library("ggplot2")
library("Rtsne")
# List of file paths
file_paths <- c(
"Hits_Nuc_Count_Only.csv",
"Hits.csv",
"Hits_1.96.csv",
"Hits_1.csv",
"SENCAN.csv",
"SENCAN_Down.csv",
"Senescopeida.csv",
"Senescopeida_Sig.csv",
"Cell Cycle.csv",
"Senescence.csv"
)
# Create a function to load a file and extract the second column as a vector
load_and_extract_second_column <- function(file_path) {
# Load the file into a data frame
data <- read.csv(file_path)
# Extract the second column as a vector
vector <- data[[2]]
return(vector)
}
# Use lapply to load the files and create a list of vectors
vector_list <- lapply(file_paths, load_and_extract_second_column)
# Override the original data frames with the vectors
Count_Only <- vector_list[[1]]
Hits_High <- vector_list[[2]]
Hits_Med <- vector_list[[3]]
Hits_Low <- vector_list[[4]]
SENCAN <- vector_list[[5]]
SENCAN_Neg <- vector_list[[6]]
Senescopedia_Down <- vector_list[[7]]
Senescopedia_Sig <- vector_list[[8]]
Cell_Cycle <- vector_list[[9]]
Senescence <- vector_list[[10]]
# Now for Clusters
Sen_Hits <- common_hits$Final_Hits
library(dplyr)
result <- data.frame(
Vector = c("SENCAN", "SENCAN_Neg", "Senescopedia_Down", "Senescopedia_Sig", "Cell_Cycle", "Senescence", "Sen_Hits"),
Count_Only = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Count_Only) / length(Count_Only) * 100), 1)),
Hits_High = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Hits_High) / length(Hits_High) * 100), 1)),
Hits_Med = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Hits_Med) / length(Hits_Med) * 100), 1)),
Hits_Low = sapply(list(SENCAN, SENCAN_Neg, Senescopedia_Down, Senescopedia_Sig, Cell_Cycle, Senescence, Sen_Hits), function(vector) round((sum(vector %in% Hits_Low) / length(Hits_Low) * 100), 1))
)
# Print the result dataframe
Test <- result
library(ggplot2)
# Reshape the Test dataframe for ggplot2
Test <- Test %>% filter (Vector %in% c("Sen_Hits"))
Test_melted <- melt(Test, id.vars = "Vector")
Test_melted <- Test_melted %>% filter(grepl("Hits", variable))
# Define a custom color palette
my_colors <- c("#E41A1C", "#377EB8", "#4DAF4A")
# Create a prettier square faceted bar chart with a fixed y-axis of 100 and custom colors
ggplot(Test_melted, aes(x = Vector, y = value, fill = Vector)) +
geom_bar(stat = "identity") +
facet_wrap(~ variable, ncol = 2, scales = "free") +
labs(title = "Percentage Comparisons",
x = "Vector",
y = "Percentage") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right",
text = element_text(face = "bold")) +
scale_fill_manual(values = my_colors) +
ylim(0, 100) +
guides(fill = guide_legend(title = "Vector")) +
scale_y_continuous(labels = scales::percent_format(scale = 1), limits = c(0, 100))
print(Test_melted)
1+1
View(all)
library("gplots")
library("RColorBrewer")
library("matrixStats")
library("plyr")
library("dplyr")
library("data.table")
library("stringr")
library("ggplot2")
library("Rtsne")
# List of file paths
file_paths <- c(
"Hits_Nuc_Count_Only.csv",
"Hits.csv",
"Hits_1.96.csv",
"Hits_1.csv",
"SENCAN.csv",
"SENCAN_Down.csv",
"Senescopeida.csv",
"Senescopeida_Sig.csv",
"Cell Cycle.csv",
"Senescence.csv"
)
# Create a function to load a file and extract the second column as a vector
load_and_extract_second_column <- function(file_path) {
# Load the file into a data frame
data <- read.csv(file_path)
# Extract the second column as a vector
vector <- data[[2]]
return(vector)
}
# Use lapply to load the files and create a list of vectors
vector_list <- lapply(file_paths, load_and_extract_second_column)
# Override the original data frames with the vectors
Count_Only <- vector_list[[1]]
Hits_High <- vector_list[[2]]
Hits_Med <- vector_list[[3]]
Hits_Low <- vector_list[[4]]
SENCAN <- vector_list[[5]]
SENCAN_Neg <- vector_list[[6]]
Senescopedia_Down <- vector_list[[7]]
Senescopedia_Sig <- vector_list[[8]]
Cell_Cycle <- vector_list[[9]]
Senescence <- vector_list[[10]]
# Now for Clusters
Sen_Hits <- common_hits$Final_Hits
library(gplots)
library(RColorBrewer)
library(dplyr)
# Read your original file and the common hits file
all <- read.csv("All_Z_Scores.csv")
common_hits <- read.csv("common_senescence_hits.csv")
all <- al[,c(1,6,27)]
library(gplots)
library(RColorBrewer)
library(dplyr)
# Read your original file and the common hits file
all <- read.csv("All_Z_Scores.csv")
common_hits <- read.csv("common_senescence_hits.csv")
all <- all[,c(1,6,27)]
# Extract common hits
common_hits_set <- common_hits$Final_Hits  # Update to match the column name from the new common_hits file
# Filter out rows with "Blank" in Gene.Symbol
all_small <- all %>%
filter(!grepl("Blank", Gene.Symbol))
all <- read.csv("All_Z_Scores.csv")
View(all)
common_hits <- read.csv("common_senescence_hits.csv")
library(gplots)
library(RColorBrewer)
library(dplyr)
# Read your original file and the common hits file
all <- read.csv("All_Z_Scores.csv")
common_hits <- read.csv("common_senescence_hits.csv")
all <- all[,c(2,6,27)]
# Extract common hits
common_hits_set <- common_hits$Final_Hits  # Update to match the column name from the new common_hits file
# Filter out rows with "Blank" in Gene.Symbol
all_small <- all %>%
filter(!grepl("Blank", Gene.Symbol))
# Handle duplicate Gene Entries
all <- all_small %>%
group_by(RefSeq.Accession.Number) %>%
mutate(RefSeq.Accession.Number = ifelse(row_number() == 1, RefSeq.Accession.Number, paste0(RefSeq.Accession.Number, "_A")))
library(gplots)
library(RColorBrewer)
library(dplyr)
# Read your original file and the common hits file
all <- read.csv("All_Z_Scores.csv")
common_hits <- read.csv("common_senescence_hits.csv")
all <- all[,c(1,2,6,27)]
# Extract common hits
common_hits_set <- common_hits$Final_Hits  # Update to match the column name from the new common_hits file
# Filter out rows with "Blank" in Gene.Symbol
all_small <- all %>%
filter(!grepl("Blank", Gene.Symbol))
# Handle duplicate Gene Entries
all <- all_small %>%
group_by(RefSeq.Accession.Number) %>%
mutate(RefSeq.Accession.Number = ifelse(row_number() == 1, RefSeq.Accession.Number, paste0(RefSeq.Accession.Number, "_A")))
# Create a new dataframe with "Sen" and "NonSen" labels based on common hits
all_labeled <- all %>%
mutate(Senescence_Status = ifelse(RefSeq.Accession.Number %in% common_hits_set, "Sen", "NonSen"))
# Save RefSeq.Accession.Number for later use
refseq_numbers <- all_labeled$RefSeq.Accession.Number
# Remove unnecessary columns (keep only relevant measures for heatmap)
all_for_heatmap <- all_labeled[, 6:42]  # Assuming columns 6 to 42 are for the heatmap
library(gplots)
library(RColorBrewer)
library(dplyr)
# Read your original file and the common hits file
all <- read.csv("All_Z_Scores.csv")
common_hits <- read.csv("common_senescence_hits.csv")
all <- all[,c(1,2,6,27)]
# Extract common hits
common_hits_set <- common_hits$Final_Hits  # Update to match the column name from the new common_hits file
# Filter out rows with "Blank" in Gene.Symbol
all_small <- all %>%
filter(!grepl("Blank", Gene.Symbol))
# Handle duplicate Gene Entries
all <- all_small %>%
group_by(RefSeq.Accession.Number) %>%
mutate(RefSeq.Accession.Number = ifelse(row_number() == 1, RefSeq.Accession.Number, paste0(RefSeq.Accession.Number, "_A")))
# Create a new dataframe with "Sen" and "NonSen" labels based on common hits
all_labeled <- all %>%
mutate(Senescence_Status = ifelse(RefSeq.Accession.Number %in% common_hits_set, "Sen", "NonSen"))
# Save RefSeq.Accession.Number for later use
refseq_numbers <- all_labeled$RefSeq.Accession.Number
# Remove unnecessary columns (keep only relevant measures for heatmap)
all_for_heatmap <- all_labeled[, 3:4]  # Assuming columns 6 to 42 are for the heatmap
# Create a matrix for heatmap generation
all_matrix <- as.matrix(all_for_heatmap)  # Convert to matrix for heatmap
rownames(all_matrix) <- refseq_numbers  # Set row names for the matrix
# Create a directory for saving heatmaps
dir.create("heatmaps", showWarnings = FALSE)
# Generate heatmaps for "Sen" and "NonSen" categories
for (label in c("Sen", "NonSen")) {
# Filter the current label
current_label <- all_labeled %>% filter(Senescence_Status == label)
# Get the names of the current label
current_label_names <- current_label$RefSeq.Accession.Number
# Subset matrix for the current label using row names
current_label_HM <- all_matrix[current_label_names, , drop = FALSE]  # Ensure drop = FALSE to maintain matrix dimensions
# Define filename for the heatmap
png_filename <- paste0("heatmaps/", label, "_Heatmap_Count_Area.png")
# Save the heatmap as a PNG file
png(png_filename, width = 800, height = 800)
# Define color palette and breaks
breaks <- unique(c(seq(-5, -1, length = 100), seq(-1, 0.1, length = 100), seq(1, 5, length = 100)))
my_palette <- colorRampPalette(c("yellow", "black", "black", "purple"))(length(breaks) - 1)
# Create heatmap
heatmap.2(t(current_label_HM),
Rowv = TRUE,
Colv = TRUE,
col = my_palette,
breaks = breaks,
density.info = "none",
trace = "none",
dendrogram = c("both"),
symm = FALSE,
symkey = FALSE,
symbreaks = TRUE,
labRow = FALSE,
labCol = FALSE,
cexRow = 0.8,
cexCol = 0.1,
margins = c(8, 2),
key.title = "1",
key.xlab = "Z Score",
sepcolor = c("black"),
sepwidth = c(0.05, 0.05),
distfun = function(x) dist(x, method = "euclidean"),
hclust = function(x) hclust(x, method = "ward.D2"))
dev.off()  # Close the PNG device
}
library(gplots)
library(RColorBrewer)
library(dplyr)
# Read your original file and the common hits file
all <- read.csv("All_Z_Scores.csv")
common_hits <- read.csv("common_senescence_hits.csv")
all <- all[,c(1,2,6,27)]
# Extract common hits
common_hits_set <- common_hits$Final_Hits  # Update to match the column name from the new common_hits file
# Filter out rows with "Blank" in Gene.Symbol
all_small <- all %>%
filter(!grepl("Blank", Gene.Symbol))
# Handle duplicate Gene Entries
all <- all_small %>%
group_by(RefSeq.Accession.Number) %>%
mutate(RefSeq.Accession.Number = ifelse(row_number() == 1, RefSeq.Accession.Number, paste0(RefSeq.Accession.Number, "_A")))
# Create a new dataframe with "Sen" and "NonSen" labels based on common hits
all_labeled <- all %>%
mutate(Senescence_Status = ifelse(RefSeq.Accession.Number %in% common_hits_set, "Sen", "NonSen"))
# Save RefSeq.Accession.Number for later use
refseq_numbers <- all_labeled$RefSeq.Accession.Number
# Remove unnecessary columns (keep only relevant measures for heatmap)
all_for_heatmap <- all_labeled[, 3:4]  # Assuming columns 6 to 42 are for the heatmap
# Create a matrix for heatmap generation
all_matrix <- as.matrix(all_for_heatmap)  # Convert to matrix for heatmap
rownames(all_matrix) <- refseq_numbers  # Set row names for the matrix
# Create a directory for saving heatmaps
dir.create("heatmaps", showWarnings = FALSE)
# Generate heatmaps for "Sen" and "NonSen" categories
for (label in c("Sen", "NonSen")) {
# Filter the current label
current_label <- all_labeled %>% filter(Senescence_Status == label)
# Get the names of the current label
current_label_names <- current_label$RefSeq.Accession.Number
# Subset matrix for the current label using row names
current_label_HM <- all_matrix[current_label_names, , drop = FALSE]  # Ensure drop = FALSE to maintain matrix dimensions
# Define filename for the heatmap
png_filename <- paste0("heatmaps/", label, "_Heatmap_Count_Area.png")
# Save the heatmap as a PNG file
png(png_filename, width = 800, height = 800)
# Define color palette and breaks
breaks <- unique(c(seq(-5, -1, length = 100), seq(-1, 0.1, length = 100), seq(1, 5, length = 100)))
my_palette <- colorRampPalette(c("yellow", "black", "black", "purple"))(length(breaks) - 1)
# Create heatmap
heatmap.2(t(current_label_HM),
Rowv = TRUE,
Colv = TRUE,
col = my_palette,
breaks = breaks,
density.info = "none",
trace = "none",
dendrogram = c("column"),
symm = FALSE,
symkey = FALSE,
symbreaks = TRUE,
labRow = FALSE,
labCol = FALSE,
cexRow = 0.8,
cexCol = 0.1,
margins = c(8, 2),
key.title = "1",
key.xlab = "Z Score",
sepcolor = c("black"),
sepwidth = c(0.05, 0.05),
distfun = function(x) dist(x, method = "euclidean"),
hclust = function(x) hclust(x, method = "ward.D2"))
dev.off()  # Close the PNG device
}
